Title = キューブレイトレーシング画質ライブラリ v1.57.0223
// 画質拡張ライブラリシステム
// BEGIN DESCRIPTION BLOCK ***
// このライブラリーはMayOS Incによって作られました.
// Making Good Better.
// "import cube.*;"で機能を体験できます。
// 完成されている機能
// END DESCPIPTION BLOCK ***

may_info = {
    "name": "キューブレイトレーシング画質ライブラリ",
    "author": "MayOSJP Inc",
    "version": (1.58.0000),
    "location": "レンダー > 画質 > モード",
    "description": "レイトレーシングされた画質システム",
    "warning": "この機能は実験的です",
    "category": "画質",
    "library": "maylib-MayCube",
    "library_version": (1.582.0535a),
    "engine": "BasicGLScriptEngine",
    "raycastengine": "maylib-RaycastRealistica",
    "engine_version": (0.242b),
} 

import lib.g.1d;
import lib.g.cpu;
import lib.g.3d;
import lib.g.2d;
import lib.g.4d;
import lib.g.color;
import lib.g.resolution;
import lib.g.graphics;
dimension {
  1D = X;
  1d {
    class move(time, amount) {
      loop(time) {
        //X座標にどのぐらい動かす
        set(x == x + amount);
      }
    }
  }
  2D = X, Y;
  2d {
    class move2d(time, amount) {
      loop(time) {
        
        set(x == x + amount);
      }
    }
    class turn(time, amount) {
      loop(time) {
        set(angle == angle + amount);
      }
    }
    class jump(time, amount) {
      loop(time) {
        set(y == y + amount);
      }
    }
  }
  3D = X, Y, Z;
  3d {
    class move3d(time, x, y, z) {
      loop(time) {
        set(position == position + x, y, z);
      }
    }
    class turn3d(time, x, y, z) {
      loop(time) {
        set(angle3d == angle3d + x, y, z);
      }
    }
    class jump3d(time, x, y, z) {
      loop(time) {
        set(jump == jump + x, y, z);
      }
    }
  }
  4D = W, X, Y, Z;
}
Color=256bits
bits
1 {black}
2 {black.white}
4 {black.white.red.green}
8 {black.white.red.green.purple.blue.yellow.brown}
16
32
64
128
256
312
512
1024
5000
RGB
Red 255
{
  set red.color = {r-255, g-0, b-0}
  set orange.color = {r-255, g-102, b-0}
  set yellow.color = {r-255, g-242, b-0}
  set green.color = {r-0, g-255, b-0}
  set Lightblue.color = {r-0, g-255, b-255}
  set blue.color = {r-0, g-0, b-255}
  set pink.color = {r-255, g-0, b-255}
}
Green 255
Blue 255
HSV
Hue.color
Saturation.color
Valve.color
Resolution
120 144p
240 240p
360 360p
480 480p
560 560p
720 720p
1080 1080p
2160 2k
3240 3k
4320 4k
8120 8k
Graphics
NVIDIA GeForce RTX =
if graphicsc = nvidia.geforcertx
enable Ray.Tracing
NVIDIA GeForce GTX
if graphicsc = nvidia.geforcegtx
enable Ray.Tracing
Intel HD Graphics
if graphicsc = intel.hdgraphics
disable Ray.Tracing
Ray.Tracing
Shadow 0.0
G Effect

script = {
  WaveFX {
    function(CuSc=sine~effectassect) {
      OnForever(numbvar.isWaveEnabled) {
        ScreenPixel(this.screenx, this.screeny == sinpixel(screen));
        check 2 + 0.331 - screenx
      }
    }
  }
  class shadowdraw(pixel, res, far) {
    int shadowres = this.script.res
    int farres = this.script.far
    // Looping as inf.
    forever {
      // easy say i say.. when find the unstable(Says, Shadow) at sun.
      find sun.angle unstable
      if unstable finded {
        // wait to drawing shadow at screen.
        wait(framerate)
        draw unstable shadowres
        if shadow.dist = mid {
          blur dist.mid 1+dist
        }
      }
    }
  }
  
  class sunrays() {
    forever true {
      if sun == true {
        calculate sun.angle to 0.1
        show calculated sunrays
      }
    }
  }
  
}
Crush = {CuSc=crush~effectassect}
distortion = {CuSc=dist~effectassect}
blur = {CuSc=blur~effectassect}

