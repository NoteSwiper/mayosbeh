// you don't need to insert import here because auto importing is enabled here!

class SlimeEntity {
  /* ENTITY INFORMATION VARIABLES */
  protected final api string entityName 	= "Slime Template";			// defines Entity's Name
  protected final api stringin entityId 	= exampleMod.modId + ":slime";		// defines Entity's ID
  protected final api entityType entityAiType 	= enum.GENTITY.AI_TYPE.SLIME;		// defines Entity's AI Type
  protected final api g-eggBehaviour egg 	= game.makeEgg(this, game.tmp.slime);	// defines Entity's Spawn egg
  protected final api gameitem entityDrop 	= game.setItem("slime_ball");		// defines Entity's Dropping item
  protected final api float entityHealth	= gentity.setHealth(1);			// defines Entity's health
  protected final api sel-entities target 	= gentity.select(player);		// defines a target entities for attacker class
  protected final api entityconfig mobConfig 	= game3d.createConfig({
    entityName,
    entityId,
    entityAiType
  });   // defines a configuration for working entity behaviours
  
  protected final api varList variables 	= game3d.createVarList({
    nbt Size$def{1},
    nbt isGrounded$def{false};
  });	// defines a variables that entity requires
  
  protected final api tex entityTexture 	= gmodel.loadTexture(enum.GMODEL.FILE_EXTENSION.PNG,"mcxml://${this.project.foldername}@/res/textures/entity/slimetmp_texture.png");	// defines texture file for entity rendering completely
  protected final api model EntityModel 	= gmodel.loadModel(enum.GMODEL.FILE_EXTENSION.XML,"mcxml://${this.project.foldername}@/res/models/entity/slimetmp_model.aes");	// defines model file for entity rendering completely
  
  public float squishAmount = 1.0F;

  /* ENTITY MOVEMENT BEHAVIOUR FUNCTIONS */
  // produces
  public default TmpSlime() {
    if (game.gameEvents:onWorldLoads) {
      setup(this);
    }
  }
  
  public class setup(target) {
    event onActivate {
      game3d.init.initEntity(target);
    }
  }

  // this is triggers list that used by event on entity
  class publicApi>?:$trga triggers {

    // Executes if entity died
    event game.entity.onDeath() {
      // summon this entity with smaller than this died entity like slime monster
      if (deathStatus.Size < 1) {
        gentity.dropEntity(entityDrop, item);
      } else {
        gentity.summon(this,Size / 2);
      }
    }
    // Executes if entity spawn
    event game.entity.onSpawn() {
      // do spawning without 5 spawning value
      if (not spawnType == 5) {
        // affects Size parameter value if this param active
        if (spawnParam.nbtTag.Size) {
          gentity.summon(this,spawnParam.nbtTag.Size);
        } else {
          gentity.summon(this,random(0,2));
        }
      } else {
        game.chat.handleError("cannot spawn " + entityName + " for 5dv.", "summon");
      }
    }
  }
  
  aiTaskList Tasks {
    gentity.ai.tasks.attack(1f,target,+2f);
    gentity.ai.tasks.waterFloat();
    gentity.ai.tasks.slimeBase();
  }
  
  event OnUpdate() {
    this.gentity:renderer.scale.Y = squishAmount;
    if (isGrounded & !gentity:prevLanding & !this:isJump) {
      squishAmount %=> 1.0F;
    } elseif (!isGrounded & gentity:prevLanding & this:isJump) {
      squishAmount += 2.1F;
    }
  }
 
  event onCollision {
    if (event:currentEvent.collisionTarget == game.selector:entity) {
      game.damage()
    }
  }
}